/*!
 * \mainpage Documentation Main Page
 *
 * This C++/ROOT Library was created by Sara Gamba and Giulia Nigrelli for the Computing Methods
 * for Experimental Physics and Data Analysis exam.
 *
 * \section intro_sec Introduction
 * Using MC and Run datas of the dimuon events of CMS, the main goals of this library are essentially three:
 * * the measurement of the Z resonance; 
 * * the measurement of the angle of the negative muon in the Collins–Soper frame of the dimuon system;
 * * the measurement of the forward-backward asymmetry.
 *
 * This functionalities are built in order to recreate similar plots of the article  
 * [Measurement of the weak mixing angle using the forward-backward asymmetry of Drell–Yan events in pp collisions at 8 TeV](https://arxiv.org/abs/1806.00863) 
 * by the CMS collaboration.
 * 
 * For simplifying the usage, a main is provided in order to execute the program.
 *
 * \section Requirements
 * 
 * * CERN ROOT 6.26
 * * Python3
 *
 * \section example_usage An example of usage
 *
 * The whole project is done in C++ files, but the compilation is done with python.
 * You can type in the terminal, in the main "cmepdaexam" folder:
 * \code
 * $ python3 openfiles.py --help
 * \endcode
 *
 * You can have some options:
 * \code
 * $ options:
 * $ -h, --help            show this help message and exit
 * $ --filter FILTER       Do you want to filter your datas? [y/n]
 * $ --filterMC FILTERMC   If filter is y: Choose the path of your MC dataframe  
 * $ --filterRUN FILTERRUN If filter is y: Choose the path of your RUN dataframe 
 * $ --MCfile MCFILE       Choose the name of your filtered MC dataframe in datas (add .root extension)
 * $ --RUNfile RUNFILE     Choose the name of your filtered RUN dataframe in datas (add .root extension)
 * $ --analysis ANALYSIS   Which analysis do you want to do? 0: no analysis, cos: costheta histograms, dimspec: Dimuon spectrum of Z, afb: Asimmetry forward backward
 * \endcode
 * 
 *
 * You have to choose (the filter option is mandatory) if you want to filter your datas or not. In the first case:
 * \code
 * $--filter y
 * \endcode
 * In this case you have to write also:
 * \code
 * $--filterMC fileMC --filterRUN fileRUN --MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * For example we chose file from [here](https://eospublichttp01.cern.ch/eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/):
 * \code
 * $ Insert your MC path:
 * $ root://eospublic.cern.ch//eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/MonteCarlo11_Summer11LegDR_DYJetsToLL_M-50_7TeV-madgraph-pythia6-tauola_merged.root
 * $ Insert your Run path:
 * $ root://eospublic.cern.ch//eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/Run2012C_DoubleMuParked_merged.root
 * \endcode
 * The program will accept only files that exist and that have the right columns, if there aren't the program will stop.
 * Then you have to choose the name of your filtered dataframes files.
 * Be careful: you have to put the .root extension to your filtered files or you won't be able to use them.
 * In this case you have to choose only file name already filtered:
 * \code
 * $--MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * If you have already used the filter function for one of the analysis and you don't want to
 * repeat it, you can choose to not filter your datas:
 * \code
 * $ --filter n
 * \endcode
 * Then you have to choose the name of your filtered dataframes files.
 * Be careful: you have to put the .root extension to your filtered files or you won't be able to use them.
 * In this case you have to choose only file name already filtered:
 * \code
 * $--MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * Then you have to insert which analysis you want to do, with this option:
 * \code
 * $ --analysis 
 * \endcode
 *
 * You can choose between:
 * - cos: the measurement of the angle of the negative muon in the Collins–Soper frame of the dimuon system;
 * - dimspec: the measurement of the Z resonance; 
 * - afb: the measurement of the forward-backward asymmetry;
 * - 0: quit.
 *
 * After the analysis the program will stop. If your analysis well ended, you can find your plots on the directory "images". 
 *
 * The default applied filters are on the following columns of the dataframes:
 * - nMuon;
 * - Muon_charge;
 * - Muon_eta;
 * - Muon_pt;
 * - Muon_dxy;
 * - Muon_pfRelIso03_chg.
 *
 *
 * \section program Description of main (and functionality of libraries)
 *  
 * \subsection filter Filter function
 * The filter function is the first function we have to use. It has the main target to filter the CMS 
 * Open Data. We have 100GB of MC events and almost 100GB of Run events.
 * We have to filter them, as said before, with this filters:
 * * number of muons equal to 2;
 * * the product of the first muon charge and the second is equal to -1;
 * * the two pseudorapidities are less than 2.4;
 * * The \f$Muon_{first,pt}\f$ is greater than 25 and \f$Muon_{second,pt}\f$ is greater than 15 or vice versa;
 * * the transverse distance of the two muons is less than 0.2;
 * * the muon isolation is less than 10% of \f$Muon_{pt}\f$.
 * 
 * 
 * The Dataset of MC datas and Run datas are saved through two Snapshots of the Dataframes with new useful variables:
 * * \f$Muon_{pt}\f$: Trasversal momentum of the two muons;
 * * \f$Muon_{eta}\f$: Pseudorapidity of the two muons;
 * * \f$Muon_{phi}\f$: Coordinate phi of the two muons;
 * * \f$Muon_{mass}\f$: Mass of the muons.
 * 
 *
 *
 * \subsection spectrum Dimuon mass Spectrum of Z
 * This macro will do the normalized histograms of the dimuon mass Spectrum of Z.
 * First it will be created a column of the dimuon four vector, passing the four column we have saved
 * to the function in **utilities.h** that returns the four vector of the dimuon system.
 * Then we will calculate the dimuon invariant mass.
 * We have also calculated the rapidity in order to plot three different plots with different costraints of rapidity.
 * The MC datas will be plotted in yellow and the Run datas will be plotted as black points.
 * We normalized the histograms with the total number of the events of MC and Run datas.
 * 
 * The canvas is saved in the directory **images** and in the subdirectory **dimuonspectrum** as **dimuon_spectrum_Zi.pdf** and **dimuon_spectrum_Zi.png**,
 * where \f$i\f$ is the costraints of rapidity. If the directories don't exist, then the program will create them.
 * 
 * We report our dimuon mass spectrum of Z particle with different costraints of rapidity. In this pictures we have the yellow histogram that represent the MC datas, and the black point the Run datas. The low histogram is the ratio between the other two. All the histogram are normalized with the total number of events.
 * \image html dimuon_spectrum_Z1.png "Dimuon mass spectrum histogram with range rapidity from 0.0 to 0.4."
 * \image html dimuon_spectrum_Z2.png "Dimuon mass spectrum histogram with range rapidity from 0.8 to 1.2."
 * \image html dimuon_spectrum_Z3.png "Dimuon mass spectrum histogram with range rapidity from 1.6 to 1.8."
 *
 * A more detail description of the functions used it can be found in \c dimuon_spectrum_Z.h, \c utilities.h and \c graphical_utilities.h.
 * \subsection costheta cos(theta*)
 * This macro will do the normalized histograms of the angle of the negative muon in the Collins–Soper frame of the dimuon system.
 * First it will be created three columns of the dimuon four vector, first muon four vector and second muon four vector, passing the four column we have saved
 * to the function in **utilities.h**.
 * Then we will calculate the dimuon invariant mass and othe quantities foundamental to calculate \f$cos(\theta^*)\f$.
 * We have also calculated the rapidity in order to plot three different plots with different costraints of rapidity.
 * The MC datas will be plotted in yellow and the Run datas will be plotted as black points.
 * We normalized the histograms with the total number of the events of MC and Run datas.
 *
 * The canvas is saved in the directory **images** and in the subdirectory **costheta** as **costhetai.pdf** and **costhetai.png**,
 * where \f$i\f$ is the costraints of rapidity. If the directories don't exist, then the program will create them.
 *
 * We report our measurement of the angle of the negative muon in the Collins–Soper frame of the dimuon system with different costraints of rapidity. In this pictures we have the yellow histogram that represent the MC datas, and the black point the Run datas. The low histogram is the ratio between the other two. All the histogram are normalized with the total number of events.
 * \image html costheta1.png "Histogram of the angle of the negative muon in the Collins–Soper frame of the dimuon system with range rapidity from 0.0 to 0.4."
 * \image html costheta2.png "Histogram of the angle of the negative muon in the Collins–Soper frame of the dimuon system with range rapidity from 0.8 to 1.2."
 * \image html costheta3.png "Histogram of the angle of the negative muon in the Collins–Soper frame of the dimuon systemm with range rapidity from 1.6 to 1.8."
 *
 * A more detail description of the functions used it can be found in \c costheta_hist.h , \c utilities.h and \c graphical_utilities.h.
 * \subsection afb Afb
 * This macro will do the 2D histogram of Afb in function of dimuon mass only of MC events.
 * First it will be created three columns of the dimuon four vector, first muon four vector and second muon four vector, passing the four column we have saved
 * to the function in **utilities.h**.
 * Then we will calculate the dimuon invariant mass and othe quantities foundamental to calculate \f$cos(\theta^*)\f$, \f$wd\f$ and \f$wn\f$ (variables you can find in the [article](https://arxiv.org/abs/1806.00863)).
 * We have also calculated the rapidity in order to plot six different plots in one canvas with different costraints of rapidity.
 * The MC datas will be plotted as black points.
 *
 * The canvas is saved in the directory **images** and in the subdirectory **afb** as **afb.pdf** and **afb.png**,
 * If the directories don't exist, then the program will create them.
 *
 * A more detail description of the functions used it can be found in \c afb.h , \c utilities.h and \c graphical_utilities.h.
 * 
 * We report our measurement of the asymmetry forward backward. We have drawn only th MC events.
 * \image html afb.png "Histogram of the asymmetry forward backward with six different ranges of rapidity."
 * 
 * \section tests Testing
 * 
 * We have done tests in C++, but the compilation is done with python.
 * You can type in the terminal, in the main "cmepdaexam" folder:
 * \code
 * $ python3 testing.py --help
 * \endcode
 *
 * You can have some options:
 * \code
 * $ options:
 * $ -h, --help            show this help message and exit
 * $ --filter FILTER       Do you want to filter your datas? [y/n]
 * $ --filterMC FILTERMC   If filter is y: Choose the path of your MC dataframe  
 * $ --filterRUN FILTERRUN If filter is y: Choose the path of your RUN dataframe 
 * $ --MCfile MCFILE       Choose the name of your filtered MC dataframe in datas (add .root extension)
 * $ --RUNfile RUNFILE     Choose the name of your filtered RUN dataframe in datas (add .root extension)
 * $ --testopt TESTOPT     Which test do you want to do? 0: no test, 1: test on
 * $                       filter function (no files needed), 2: costheta test
 * $                       (files needed), 3: test on energy (files needed), 4:
 * $                       test on energy formulas (files needed), 5: test on
 * $                       operation_hist (no files needed)
 * \endcode
 * 
 *
 * You have to choose (the filter option is mandatory only for tests 2, 3, 4) if you want to filter your datas or not. In the first case:
 * \code
 * $--filter y
 * \endcode
 * In this case you have to write also:
 * \code
 * $--filterMC fileMC --filterRUN fileRUN --MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * For example we chose file from [here](https://eospublichttp01.cern.ch/eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/):
 * \code
 * $ Insert your MC path:
 * $ root://eospublic.cern.ch//eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/MonteCarlo11_Summer11LegDR_DYJetsToLL_M-50_7TeV-madgraph-pythia6-tauola_merged.root
 * $ Insert your Run path:
 * $ root://eospublic.cern.ch//eos/opendata/cms/derived-data/NanoAODRun1/01-Jul-22/Run2012C_DoubleMuParked_merged.root
 * \endcode
 * The program will accept only files that exist and that have the right columns, if there aren't the program will stop.
 * Then you have to choose the name of your filtered dataframes files.
 * Be careful: you have to put the .root extension to your filtered files or you won't be able to use them.
 * In this case you have to choose only file name already filtered:
 * \code
 * $--MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * If you have already used the filter function for one of the analysis and you don't want to
 * repeat it, you can choose to not filter your datas:
 * \code
 * $ --filter n
 * \endcode
 * Then you have to choose the name of your filtered dataframes files.
 * Be careful: you have to put the .root extension to your filtered files or you won't be able to use them.
 * In this case you have to choose only file name already filtered:
 * \code
 * $--MCfile Events_MC.root --RUNfile Events_datas.root
 * \endcode
 * Then you have to insert which test you want to do, with this option:
 * \code
 * $ --testopt 
 * \endcode
 * If you want to do test 5 or 1 it is not necessary to write the filter option. You can only put the testopt.
 *
 * You will be able to choose the test you want to do: 
 * * 1: test on filter function;
 * * 2: test on costheta value; 
 * * 3: test on energy value;
 * * 4: test on energy formula value;
 * * 5: test on operation histograms;
 * * 0: quit.
 *
 * After a test your program will stop. If the test well ended there will be written "Test passed!".
 * The default applied filters are on the following columns of the dataframes:
 * - nMuon;
 * - Muon_charge;
 * - Muon_eta;
 * - Muon_pt;
 * - Muon_dxy;
 * - Muon_pfRelIso03_chg.
 *
 * 
 * \subsection test1 Test on filter function
 * Test on filter function handles the correct error given by the filter function. 
 * In this test we call \c filter_df(), with wrong path, empty dataframe, right dataframe, dataframe with few columns
 * to see if the error given by the function corresponds to our previsions.
 * It prints "Test passed!" everything was done correctly or "Test failed!".
 * A more detail description of the functions used it can be found in \c test_filt.cpp.
 *
 * \subsection test2 Test on costheta value
 * Test on costheta function handles if \f$|cos(\theta^*)|\f$, defined in \c utilities.h, is <1.
 * It creates all quantities in \c allquantities() and we check how many rows left with \f$|cos(\theta^*)|>1\f$.
 * It prints "Test passed!" if there are no rows left or "Test failed!".
 * A more detail description of the functions used it can be found in \c test_cos.cpp.
 *
 * \subsection test3 Test on energy value
 * Test on energy values function handles if \f$E_1+E_2-E_{tot}\f$, defined in \c utilities.h, is less or higher than 0.01% of \f$E_{tot}\f$.
 * It creates all quantities in \c allquantities() and we check how many rows left with \f$|E_1+E_2-E_{tot}|>0.01\f$% \f$E_{tot}\f$.
 * It prints "Test passed!" if there are no rows left or "Test failed!".
 * A more detail description of the functions used it can be found in \c test_energy.cpp.
 *
 * \subsection test4 Test on energy value formulas
 * Test on energy values function handles if \f$E_i^2=p_i^2+m^2\f$, defined in \c utilities.h, is less or higher than 0.01% of \f$E_i\f$.
 * It creates all quantities in \c allquantities() and we check how many rows left with \f$|E_i-(p_i^2+m^2)|>0.01\f$% \f$E_i\f$.
 * It prints "Test passed!" if there are no rows left or "Test failed!".
 * A more detail description of the functions used it can be found in \c test_energy_formulas.cpp.
 *
 * \subsection test5 Test on operation histograms
 * Test on \c operationhist() function handles if the operations done on 4 different histograms have the correct result.
 * It creates four histograms and then four random variables. We have inserted the variables in four different bins of the four
 * histograms, rearranged to create new variables. Then we have test if the difference between the content of each bin and
 * the variable calculated (\f$var_{calc}\f$) as we expect is < 0.1%\f$var_{calc}\f$. Then the program checks if the content of each bin and
 * the variable calculated are concord.
 * It prints "Test passed!" if the statements are true or "Test failed!" if not.
 * A more detail description of the functions used it can be found in \c test_operationhist.cpp. 
 */